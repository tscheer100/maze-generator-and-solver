need to make a list of cells that are on the edge as not to go past the edge
e.g. if top row, don't go to the neighbor in the north, and if east row, don't go to neighbor in the east.

so maybe
    
    for k in range(1,len(grid_size)):
        if k is > 0 and k <= 10
            top_edge.append(grid[k])
        elif k % 10 == 1
            west_edge.append(grid[k])
        elif k % 10 == 0
            east_edge.append(grid[k])
        elif k >= ((SIZE*SIZE) - (SIZE + 1)) and k <= (SIZE * SIZE)
            south_edge.append(grid[k])
[completed]



we need to mark the current cell as visited.
afterward, while the current cell has any unvisited neighbors
    choose one of the unvisited neighbors
    remove the wall between the unvisited cell and the current cell
    invoke recursively

so

current_cell = grid[1]

def chooseNeighbor():
    unvisited = []
    if grid[current_cell].top_row == False:
        if grid[current_cell - GRID_SIZE].visited == False:
            unvisited.append(grid[current_cell - GRID_SIZE])
    
    if grid[current_cell].left_row == False:
        if grid[current_cell - 1].visited == False:
            unvisited.append(grid[current_cell - 1])

    if grid[current_cell].right_row == False:
        if grid[current_cell + 1].visited == False:
            unvisited.append(grid[current_cell + 1])

    if grid[current_cell].bottom_row == False:
        if grid[current_cell + SIZE].visited == False:
            unvisited.append(grid[current_cell + GRID_SIZE])

we need to choose random unvisited neighbor wall to knowck down. so with our previous method, something like...

def knockNeighbor():
    randList = neighbor()
    choice = random.choicee(randList)
    dir = ""
    if choice == current_cell - GRID_SIZE:
        dir = "north"
    elif choice == current_cell - 1:
        dir = "west"
    elif choice == current_cell + 1:
        dir = "east"
    elif choice == current_cell _ GRID_SIZE:
        dir = "south"
    else:
        print("error in knockNeighbor() during dir selection")
    
    wallKnock(dir)
    current_cell = choice

